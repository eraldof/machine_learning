linear_reg(penalty = tune(), mixture = tune()) |>
set_mode("regression") |>
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
dist_power = tune(),
weight_func = "gaussian"
) |>
set_mode("regression") |>
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
) |>
set_mode("regression") |>
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(mode_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
wf
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
dist_power = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
wf
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(mode_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
wf
dist_power(c(2, 50))
c(2, 50)
update_parametros <-
wf |>
extract_parameter_set_dials() |>
update("neighbors" = 1:20, "dist_power" = dist_power(c(2, 50)))
update_parametros <-
wf |>
extract_parameter_set_dials() |>
update("neighbors" = 1:20, "dist_power" = dist_power(c(2, 50)))
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
dist_power = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(mode_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
update_parametros <-
wf |>
extract_parameter_set_dials() |>
update("neighbors" = 1:20, "dist_power" = dist_power(c(2, 50)))
update_parametros <-
wf |>
extract_parameter_set_dials() |>
update("dist_power" = dist_power(c(2, 50)))
wf %>%
extract_parameter_set_dials()
wf %>%
extract_parameter_set_dials()
wf %>%
extract_parameter_set_dials()
wf %>%
extract_parameter_set_dials(1)
wf %>%
extract_parameter_set_dials("svm")
rlang::last_trace()
wf
wf[1]
wf$option
wf$wflow_id
wf %>%
extract_parameter_set_dials("recipe_mode_knn")
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 1:20, "dist_power" = dist_power(c(2, 50)))
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 1:20)
wf %>%
extract_parameter_set_dials("recipe_mode_knn")
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 1:20)
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 1:20)
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 2:20)
update("neighbors" = c(2,5)
update_parametros <-
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = c(2,5))
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = c(2:20))
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("dist_power" = dist_power(c(2, 50)))
wf %>%
extract_parameter_set_dials("recipe_mode_knn")
update_parametros
update_parametros
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(mode_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
wf %>%
extract_parameter_set_dials("recipe_mode_knn")
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update(neighbors = range(1,20))
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = range(1,20))
rlang::last_trace()
update_parametros <-
wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = 5)
wf_nadaraya |>
extract_parameter_set_dials()
wf %>% extract_parameter_set_dials()
wf
wf %>% id
wf %>% extract_parameter_set_dials()
wf %>% extract_parameter_set_dials("svm")
wf %>% extract_parameter_set_dials("recipe_model_knn")
wf
wf %>% extract_parameter_set_dials("recipe_mode_knn")
wf %>% extract_parameter_set_dials("recipe_mode_knn") %>% extract_parameter_set_dials("neighbors")
wf %>% extract_parameter_set_dials("neighbors")
wf %>% extract_parameter_set_dials("recipe_mode_knn")
wf %>% extract_parameter_set_dials("recipe_mode_knn") %>% extract_parameter_dials("neighbors")
wf %>% extract_parameter_set_dials("recipe_mode_knn")
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(mode_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
controle_grid <- control_grid(
save_pred = TRUE,
save_workflow = TRUE,
parallel_over = "resamples"
)
wf %>% extract_parameter_set_dials("recipe_mode_knn")
wf %>% extract_parameter_set_dials("recipe_mode_knn")
wf %>% extract_parameter_set_dials("recipe_mode_knn") %>% update(
"neighbors" = neighbors(1:25)
)
wf %>% extract_parameter_set_dials("recipe_mode_knn") %>% update(
"neighbors" = neighbors(range = c(1,25))
)
update_para
update_parametros <- wf %>% extract_parameter_set_dials("recipe_mode_knn") %>% update(
"neighbors" = neighbors(range = c(1,25))
)
update_parametros <- wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_parametros
update_parametros <- wf %>% extract_parameter_set_dials("recipe_mode_svm") %>%
update("cost" = cost(range = c(-10,10)), "rbf_sigma" = rbf_sigma(range = c(-10,10)))
wf
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
update_parametros <- wf %>%
extract_parameter_set_dials("recipe_mode_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_parametros <- wf %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_parametros <- wf %>% extract_parameter_set_dials("recipe_modelo_svm") %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
update_parametros
update_parametros <- wf %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)),
"neighbors" = neighbors(range = c(1,25)))
wf
knn %>% extract_parameter_set_dials()
update_knn <- knn %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_svm <- svm %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
update_knn <- knn %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_svm <- svm %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
controle_grid <- control_grid(
save_pred = TRUE,
save_workflow = TRUE,
parallel_over = "resamples"
)
wf
wf %>% extract_parameter_dials()
wf %>% extract_parameter_dials("recipe_modelo_knn")
wf %>% extract_parameter_set_dials("recipe_modelo_knn")
wf %>% extract_parameter_dials("neighbors")
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
update_knn <- knn %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
update_svm <- svm %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
meu_grid <- dials::grid_max_entropy(c(update_knn, update_svm), size = 100L)
meu_grid <- dials::grid_max_entropy(update_knn, size = 100L)
tunagem <-
tune::tune_grid(
wf,
resamples = vfold,
grid = meu_grid,
metrics = metrica,
control = control_grid(save_pred = TRUE, verbose = TRUE)
)
tunagem <-
tune::tune_grid(
knn,
resamples = vfold,
grid = meu_grid,
metrics = metrica,
control = control_grid(save_pred = TRUE, verbose = TRUE)
)
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
knn <- knn %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
svm <- svm %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
knn <- knn %>%
extract_parameter_set_dials("recipe_modelo_knn") %>%
update("neighbors" = neighbors(range = c(1,25)))
svm <- svm %>% extract_parameter_set_dials() %>%
update("cost" = cost(range = c(-10,10)),
"rbf_sigma" = rbf_sigma(range = c(-10,10)))
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
elastic <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_mode("regression") %>%
set_engine("glmnet")
knn <-
nearest_neighbor(
neighbors = tune(),
weight_func = "gaussian"
) %>%
set_mode("regression") %>%
set_engine("kknn")
svm <-
svm_rbf(
cost = tune(),
rbf_sigma = tune(),
margin = tune()
)  %>%
set_mode("regression") %>%
set_engine("kernlab")
vfold <-
treinamento |>
vfold_cv(v = 10, strata = Cooling_Load)
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
wf <-
workflow_set(
preproc = list(receita),
models = list(modelo_knn = knn, modelo_elastic = elastic, modelo_svm = svm),
cross = TRUE
)
controle_grid <- control_grid(
save_pred = TRUE,
save_workflow = TRUE,
parallel_over = "resamples"
)
