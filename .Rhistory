p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
View(eqm2)
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
}
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
i = 1
eqm2 = data.frame(P = 1:50, y = NA)
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
eqm2
apply((tester[,1] - predict(fit, tester))^2, MARGIN = 2, FUN = mean)
eqm2[i,2] <- mean(tester[,1] - predict(fit, tester))^2)
mean(tester[,1] - predict(fit, tester))^2)
tester[,1] - predict(fit, tester)
tester[,1] - predict(fit, tester))^
(tester[,1] - predict(fit, tester))^2
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
eqm2 = data.frame(P = 1:50, y = NA)
for(i in 1:p){
if(i > 1){
trainer <- cbind(trainer, trainer[,2]^i)
colnames(trainer) <- c("y", "x", paste0("x", 2:i))
fit <- lm(y~., trainer)
## Avaliando no conjunto de teste
tester <- cbind(tester, tester[,2]^i)
colnames(tester) <- c("y", "x", paste0("x", 2:i))
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
else{
fit <- lm(y~., trainer)
eqm2[i,2] <- mean((tester[,1] - predict(fit, tester))^2)
}
}
colnames(eqm2) <- c("P", "EQM")
g <- ggplot(eqm2, aes(P, EQM)) +
geom_line(linetype = 2, size = 0.4) +
geom_point(size = 2, aes(colour = -EQM)) +
labs(x = "P", y = "EQM",
title = "Avaliação do EQM",
subtitle = "Repartindo conjunto treino/teste, sem validação cruzada") +
xlim(c(0,18)) + ylim(c(10,130))
g
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
leave <- loo_cv(trainer)
results1 <- data.frame(P = NA, EQM = NA)
for(b in 1:dim(leave)[1]){
eqm <- NULL
for(i in 1:p){
if(i > 1){
temp_trainer <- leave$splits[[b]] %>% analysis()
temp_tester <- leave$splits[[b]] %>% assessment()
for(j in 2:i){
temp_trainer <- cbind(temp_trainer, temp_trainer$x^j)
temp_tester <- cbind(temp_tester, temp_tester$x^j)
colnames(temp_trainer) <- c("y", "x", paste0("x", 2:j))
colnames(temp_tester) <- c("y", "x", paste0("x", 2:j))
}
fit <- lm(y~., temp_trainer)
eqm[i] <- as.numeric((temp_tester[,1] - predict(fit, temp_tester))^2)
}
else{
temp_trainer <- leave$splits[[b]] %>% analysis()
temp_tester <- leave$splits[[b]] %>% assessment()
fit <- lm(y~., temp_trainer)
eqm[i] <- as.numeric((temp_tester[,1] - predict(fit, newdata = temp_tester))^2)
}
}
results1[b,1] <- which(eqm == min(eqm))[1]
results1[b,2] <- min(eqm)
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
k = 5
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
vfold <- vfold_cv(trainer, v = 5)
results2 <- data.frame(P = NA, EQM = NA)
for(b in 1:dim(vfold)[1]){
eqm <- NULL
for(i in 1:p){
if(i > 1){
temp_trainer <- vfold$splits[[b]] %>% analysis()
temp_tester <- vfold$splits[[b]] %>% assessment()
for(j in 2:i){
temp_trainer <- cbind(temp_trainer, temp_trainer$x^j)
temp_tester <- cbind(temp_tester, temp_tester$x^j)
colnames(temp_trainer) <- c("y", "x", paste0("x", 2:j))
colnames(temp_tester) <- c("y", "x", paste0("x", 2:j))
}
fit <- lm(y~., temp_trainer)
eqm[i] <- mean((temp_tester[,1] - predict(fit, newdata = temp_tester))^2)
}
else{
temp_trainer <- vfold$splits[[b]] %>% analysis()
temp_tester <- vfold$splits[[b]] %>% assessment()
fit <- lm(y~., temp_trainer)
eqm[i] <- apply((temp_tester[,1] - predict(fit, newdata = temp_tester))^2, MARGIN = 2, mean)
}
}
results2[b,1] <- which(eqm == min(eqm))[1]
results2[b,2] <- min(eqm)
}
rm(list = ls())
dados_expectativa_renda <- read.csv("dados_expectativa_renda.csv")
set.seed(2023)
p = 50
k = 5
dados_exp <- dados_expectativa_renda[,-1]
colnames(dados_exp) <- c("y", "x")
dados_exp <- initial_split(dados_exp, prop = 3/4)
trainer <- training(dados_exp)
tester <- testing(dados_exp)
vfold <- vfold_cv(trainer, v = 5)
results2 <- data.frame(P = NA, EQM = NA)
for(b in 1:dim(vfold)[1]){
eqm <- NULL
for(i in 1:p){
if(i > 1){
temp_trainer <- vfold$splits[[b]] %>% analysis()
temp_tester <- vfold$splits[[b]] %>% assessment()
for(j in 2:i){
temp_trainer <- cbind(temp_trainer, temp_trainer$x^j)
temp_tester <- cbind(temp_tester, temp_tester$x^j)
colnames(temp_trainer) <- c("y", "x", paste0("x", 2:j))
colnames(temp_tester) <- c("y", "x", paste0("x", 2:j))
}
fit <- lm(y~., temp_trainer)
eqm[i] <- mean((temp_tester[,1] - predict(fit, newdata = temp_tester))^2)
}
else{
temp_trainer <- vfold$splits[[b]] %>% analysis()
temp_tester <- vfold$splits[[b]] %>% assessment()
fit <- lm(y~., temp_trainer)
eqm[i] <- mean((temp_tester[,1] - predict(fit, newdata = temp_tester))^2)
}
}
results2[b,1] <- which(eqm == min(eqm))[1]
results2[b,2] <- min(eqm)
}
library(tidymodels)
library(tidymodels)
library(tibble)
library(purrr)
library(ggplot2)
library(patchwork)
tidymodels::tidymodels_prefer()
rm(list = ls())
wine <- read.csv("winequality-red.csv")
skimr::skim(wine)
colnames(wine) <- c(paste0("x", 1:11), "y")
#Data split
wine <- initial_split(wine, prop = 3/4)
trainer <- training(wine)
tester <- testing(wine)
#Setting Engine
modelo_eqm <-
linear_reg(penalty = 0, mixture = 0) %>%
set_mode("regression") %>%
set_engine("glmnet")
modelo_ridge <-
linear_reg(penalty = tune::tune(), mixture = 0) %>%
set_mode("regression") %>%
set_engine("glmnet")
modelo_lasso <-
parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>%
set_mode("regression") %>%
parsnip::set_engine("glmnet")
modelo_elastic <-
parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>%
set_mode("regression") %>%
parsnip::set_engine("glmnet")
#workflow
all_wf <-
workflow_set(
preproc = list(y ~ . ),
models = list(eqm = modelo_eqm, ridge = modelo_ridge, lasso = modelo_lasso, elastic = modelo_elastic),
cross = TRUE
)
#cross-validation
set.seed(2023)
cv <- rsample::vfold_cv(trainer, v = 5L)
#metrics
metrica <- yardstick::metric_set(rmse)
#tunning
tunagem <-
all_wf %>%
workflow_map(
seed = 2023,
verbose = TRUE,
resamples = cv,
grid = 50,
metrics = metrica
)
#melhores modelos
modelos_rank <- tunagem %>% rank_results()
melhor_eqm <-
tunagem %>%
extract_workflow_set_result("formula_eqm") %>%
select_best("rmse")
melhor_ridge <-
tunagem %>%
extract_workflow_set_result("formula_ridge") %>%
select_best("rmse")
melhor_lasso <-
tunagem %>%
extract_workflow_set_result("formula_lasso") %>%
select_best("rmse")
melhor_elastic <-
tunagem %>%
extract_workflow_set_result("formula_elastic") %>%
select_best("rmse")
finalizando_eqm <-
tunagem %>%
extract_workflow("formula_eqm") %>%
finalize_workflow(melhor_eqm) %>%
last_fit(split = wine)
finalizando_ridge <-
tunagem %>%
extract_workflow("formula_ridge") %>%
finalize_workflow(melhor_ridge) %>%
last_fit(split = wine)
finalizando_lasso <-
tunagem %>%
extract_workflow("formula_lasso") %>%
finalize_workflow(melhor_lasso) %>%
last_fit(split = wine)
finalizando_elastic <-
tunagem %>%
extract_workflow("formula_elastic") %>%
finalize_workflow(melhor_elastic) %>%
last_fit(split = wine)
knitr::kable(data.frame(row.names = c("EQM", "Ridge", "Lasso", "Elastic"),
"RMSE" = as.numeric(c((finalizando_eqm |> collect_metrics())[1,3],
(finalizando_ridge |> collect_metrics())[1,3],
(finalizando_lasso |> collect_metrics())[1,3],
(finalizando_elastic |> collect_metrics())[1,3])))
)
autoplot(finalizando_elastic %>% collect_predictions())
finalizando_elastic %>% collect_predictions()
autoplot(finalizando_elastic)
autoplot(finalizando_elastic %>% collect_predictions(), metric = "rmse")
autoplot(modelos_rank, metric = "rmse")
autoplot(modelos_rank)
autoplot(modelo_eqm)
rlang::last_trace()
autoplot(melhor_elastic)
autoplot(melhor_elastic, metric = "rmse")
ggplot2::autoplot(melhor_elastic, metric = "rmse")
